library(ComplexHeatmap)
library(ReactomePA)
library(clusterProfiler)
BiocManager::install("ComplexHeatmap")
## Revisit Chow et al., PNAS 2020 bulk RNA seq data
# CRAN
library(readr)
library(dplyr)
library(WGCNA)
library(spatstat)
library(circlize)
# Bioconductor
library(DESeq2)
library(org.Hs.eg.db)
library(ComplexHeatmap)
library(ReactomePA)
library(clusterProfiler)
setwd("~/Documents/bfx_proj/Revisit_RNAseq_2020_Chow_PNAS/")
### counts data ---
r_count <- read_csv("Data/Chow_PNAS_rawcounts.csv")
r_count <- r_count[!duplicated(r_count$gene), ] # remove duplicate genes
cmtx <- as.matrix(r_count[, -1]) # make numerical matrix
rownames(cmtx) <- r_count$gene
### metadata ---
meta <- read_csv("Data/Chow_PNAS_meta.csv")
### gene synonym reference ---
hs <- org.Hs.eg.db
hs <- AnnotationDbi::select(hs,
keys = rownames(cmtx),
columns = c("ENTREZID"),
keytype = "SYMBOL")
hs <- hs[!duplicated(hs$SYMBOL), ]
# clean up
rm(r_count)
### normalize counts in DESeq2 ---
ds2_ <- DESeqDataSetFromMatrix(countData = cmtx, colData = meta, design = ~ 1)
ds2_ <- DESeq(ds2_) # run DESeq2
cmtx_w <- t(counts(ds2_, normalized = T)) # extract normalized counts, transpose for WGCNA
### WGCNA qc for genes and samples ---
gsg_w <- goodSamplesGenes(cmtx_w)
if (!gsg_w$allOK){
if (sum(!gsg_w$goodGenes) > 0)
printFlush(paste("Removing genes:", paste(colnames(cmtx_w)[!gsg_w$goodGenes], collapse = ", ")));
if (sum(!gsg_w$goodSamples) > 0)
printFlush(paste("Removing samples:", paste(rownames(cmtx_w)[!gsg_w$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
cmtx_w <- cmtx_w[gsg_w$goodSamples, gsg_w$goodGenes]
}
### shorten and dummify metadata
meta_w <- meta[, c("age", "sex", "path_T_stage", "treatment")]
meta_w <- data.frame(meta_w[, "age"],
dummify(meta_w$sex),
dummify(meta_w$treatment))
# clean up
rm(ds2_, gsg_w)
### filter top variant genes for speed ---
cmtx_w <- cmtx_w[, order(colVars(as.matrix(cmtx_w)), decreasing = T)[1:5000]]
### assay possible thresholds ---
sft_w <- pickSoftThreshold(cmtx_w, powerVector = c(c(1:10), seq(from = 12, to = 20, by = 2)))
### calculate gene similarity ---
adj_w <- adjacency(cmtx_w, power = sft_w$powerEstimate) # calculate adjacency matrix; how connected each gene is to other genes
tom_w <- TOMsimilarity(adj_w) # calculate topological overlap
geneTree_w <- hclust(as.dist(1 - tom_w), method = "average") # calculate gene tree by dissimilarity
### assign genes to gene module; produces vector of module assignments for each gene ---
mods_w <- cutreeDynamic(geneTree_w, # clustering
distM = 1 - tom_w, # distance matrix
deepSplit = 2,
pamRespectsDendro = F,
minClusterSize = 30) # minimum cluster size is large ~30
### estimate module similarity ---
MEs_w <- moduleEigengenes(cmtx_w, colors = labels2colors(mods_w)) # calculate eigengenes (samples) with un-merged ME color assignment
MEs_ext_w <- MEs_w$eigengenes # extract eigengenes; eigengenes are samples, therefore looking for similarity across all samples
METree_w <- hclust(as.dist(1-cor(MEs_ext_w)), # dissimilarity matrix: col is gene modules, row is samples
method = "average") # construct dendrogram
plot(METree_w, sub = "", xlab = "", cex = 0.6)
abline(h = 0.1, col = "red") # dissimilarity threshold e.g. (0.25 is similarity of 0.75)
### merge similar modules ---
mods_merg_w <- mergeCloseModules(cmtx_w, labels2colors(mods_w), cutHeight = 0.1) # merge similar modules
plotDendroAndColors(geneTree_w, cbind(labels2colors(mods_w), mods_merg_w$colors),
c("Initial modules", "Merged modules"),
dendroLabels = FALSE, hang = 0.03,
cex.colorLabels = 0.6,
addGuide = TRUE, guideHang = 0.05)
### correlate final modules to traits ---
MEs_w <- moduleEigengenes(cmtx_w, mods_merg_w$colors)$eigengenes # re-calculate eigengenes with merged ME colors
MEs_w <- orderMEs(MEs_w) # cluster MEs by similarity; put grey (unassigned) at end
moduleTraitCor_w <- cor(MEs_w, meta_w, use = "p") # correlation of sample eigenvalue vs sample meta value; pairwiase complete observations
moduleTraitPvalue_w <- corPvalueStudent(moduleTraitCor_w, nrow(cmtx_w)) # calculate P value of correlations
moduleTraitFDR_w <- matrix(p.adjust(moduleTraitPvalue_w, method = "BH"),
nrow = nrow(moduleTraitPvalue_w),
ncol = ncol(moduleTraitPvalue_w)) # adjust by FDR
col_fun <- circlize::colorRamp2(c(-1, 0, 1), c("green", "white", "red"))
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height,
gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = 1, height = 1,
gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
grid.rect(x = x, y = y, width = 0.5, height = 0.5,
gp = gpar(col = "grey", fill = NA))
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = 0.5, height = 0.5,
gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = 0.1, height = 0.1,
gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
#grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
#grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
if(i == 1) {
grid.segments(x, y-h*0.5, x, y)
} else if(i == nrow(go_mat)) {
grid.segments(x, y, x, y+h*0.5)
} else {
grid.segments(x, y-h*0.5, x, y+h*0.5)
}
if(j == 1) {
grid.segments(x, y, x+w*0.5, y)
} else if(j == ncol(go_mat)) {
grid.segments(x-w*0.5, y, x, y)
} else {
grid.segments(x-w*0.5, y, x+w*0.5, y)
}
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
#grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
if(i == 1) {
grid.segments(x, y-h*0.5, x, y)
} else if(i == nrow(moduleTraitCor_w)) {
grid.segments(x, y, x, y+h*0.5)
} else {
grid.segments(x, y-h*0.5, x, y+h*0.5)
}
if(j == 1) {
grid.segments(x, y, x+w*0.5, y)
} else if(j == ncol(moduleTraitCor_w)) {
grid.segments(x-w*0.5, y, x, y)
} else {
grid.segments(x-w*0.5, y, x+w*0.5, y)
}
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, w, h, fill) {
if(i == 1) {
grid.segments(x, y-h*0.5, x, y)
} else if(i == nrow(moduleTraitCor_w)) {
grid.segments(x, y, x, y+h*0.5)
} else {
grid.segments(x, y-h*0.5, x, y+h*0.5)
}
if(j == 1) {
grid.segments(x, y, x+w*0.5, y)
} else if(j == ncol(moduleTraitCor_w)) {
grid.segments(x-w*0.5, y, x, y)
} else {
grid.segments(x-w*0.5, y, x+w*0.5, y)
}
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(w, h)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
#grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
heat_mtx <- moduleTraitCor_w
Heatmap(heat_mtx,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(heat_mtx)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(heat_mtx[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(heat_mtx,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(heat_mtx)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(heat_mtx[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
heat_mtx <- moduleTraitCor_w
Heatmap(heat_mtx,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(heat_mtx)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(heat_mtx[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(heat_mtx,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitFDR_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
width = unit(5*ncol())
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
heat_mtx <- moduleTraitCor_w
Heatmap(heat_mtx,
name = "Correlation",
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/5 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(ncol(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/2 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/4 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
Heatmap(moduleTraitCor_w,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(ncol(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/4 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j])/4 * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
Heatmap(moduleTraitCor_w,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = F)
Heatmap(moduleTraitCor_w,
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F,
show_heatmap_legend = T)
Heatmap(moduleTraitCor_w,
name = "Correlation",
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F)
library(scico)
scico(3, "vanimo")[1]
scico(3, palette = "vanimo")
col_fun <- circlize::colorRamp2(c(-1, 0, 1), c(scico(3, palette = "vanimo")[1], scico(3, palette = "vanimo")[2], scico(3, palette = "vanimo")[3]))
Heatmap(moduleTraitCor_w,
name = "Correlation",
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F)
col_fun <- circlize::colorRamp2(c(-1, -0.5, 0, 0.5, 1),
c(scico(5, palette = "vanimo")[1], scico(5, palette = "vanimo")[2],
scico(5, palette = "vanimo")[3],
scico(5, palette = "vanimo")[4], scico(5, palette = "vanimo")[5]))
Heatmap(moduleTraitCor_w,
name = "Correlation",
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
if(moduleTraitFDR_w[i, j] > 0.5){
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = "grey30"))
} else {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
}
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
},
cluster_columns = F)
Heatmap(moduleTraitCor_w,
name = "Correlation",
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
if(moduleTraitFDR_w[i, j] > 0.5){
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = "grey30"))
} else {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
}
},
cluster_columns = F)
if(moduleTraitFDR_w[i, j] < 0.5){
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = "grey30"))
} else {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
}
Heatmap(moduleTraitCor_w,
name = "Correlation",
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
if(moduleTraitFDR_w[i, j] < 0.5){
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = "grey30"))
} else {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
}
},
cluster_columns = F)
if(moduleTraitFDR_w[i, j] > 0.5){
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = "grey30"))
} else {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
}
Heatmap(moduleTraitCor_w,
name = "Correlation",
col = col_fun,
width = unit(ncol(moduleTraitCor_w) * 5, "mm"),
height = unit(nrow(moduleTraitCor_w) * 5, "mm"),
rect_gp = gpar(type = "none"),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.circle(x = x, y = y, r = abs(-log10(moduleTraitFDR_w)[i, j]/2) * min(unit.c(width, height)),
gp = gpar(fill = col_fun(moduleTraitCor_w[i, j]), col = NA))
if(moduleTraitFDR_w[i, j] > 0.5){
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = "grey30"))
} else {
grid.rect(x = x, y = y, width = width, height = height, gp = gpar(col = "grey", fill = NA))
}
},
cluster_columns = F)
